//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/InMoov.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InMoov : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InMoov()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InMoov"",
    ""maps"": [
        {
            ""name"": ""Left Hand"",
            ""id"": ""94141e1b-1a67-4c44-b36f-c3ea7bf90a78"",
            ""actions"": [
                {
                    ""name"": ""ThumbPress"",
                    ""type"": ""Value"",
                    ""id"": ""f9dcb827-109d-4442-8dac-de392dde6699"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MRPPress"",
                    ""type"": ""Value"",
                    ""id"": ""123658fa-6480-42f9-ad47-6f889593bbd8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IndexPress"",
                    ""type"": ""Value"",
                    ""id"": ""e75a8f0d-d9c9-4d88-bf52-b6836dc39f1d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""acbcb24b-9e8c-4424-a791-0b7b69233dbf"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f4bd67f-3eb2-4349-b5a0-339e438fb2f1"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MRPPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4cefc8f5-b3b1-431a-b828-39c472898172"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IndexPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5c15251-6b16-49b4-bd60-0735580aa371"",
                    ""path"": ""<OculusTouchController>{LeftHand}/devicePose/velocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22bacc29-5ddf-41e0-8e4f-28d976164037"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThumbPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Right Hand"",
            ""id"": ""d5a0078a-9e4a-4683-a1e2-5a2be2bf6fc2"",
            ""actions"": [
                {
                    ""name"": ""ThumbPress"",
                    ""type"": ""Value"",
                    ""id"": ""7c100139-746f-45c4-a01f-da669e2b97d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MRPPress"",
                    ""type"": ""Value"",
                    ""id"": ""7a3dc560-264e-4d18-a9c6-0a9d142c137a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IndexPress"",
                    ""type"": ""Value"",
                    ""id"": ""e40bf1ea-4cea-4d2c-a14f-483348355478"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""4fdcf4af-0dcc-4041-9dcd-8573fb7127fd"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be47b0ea-2995-4ea2-95f5-c2b7cb17e757"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThumbPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ab0867f-26af-424e-8e35-0063afd16aab"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MRPPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa3edef0-a451-4064-9f6b-47ef65012edb"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IndexPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b63bf166-1ae1-4cd8-9d6a-4f500146c606"",
                    ""path"": ""<OculusTouchController>{RightHand}/devicePose/velocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Left Hand
        m_LeftHand = asset.FindActionMap("Left Hand", throwIfNotFound: true);
        m_LeftHand_ThumbPress = m_LeftHand.FindAction("ThumbPress", throwIfNotFound: true);
        m_LeftHand_MRPPress = m_LeftHand.FindAction("MRPPress", throwIfNotFound: true);
        m_LeftHand_IndexPress = m_LeftHand.FindAction("IndexPress", throwIfNotFound: true);
        m_LeftHand_Velocity = m_LeftHand.FindAction("Velocity", throwIfNotFound: true);
        // Right Hand
        m_RightHand = asset.FindActionMap("Right Hand", throwIfNotFound: true);
        m_RightHand_ThumbPress = m_RightHand.FindAction("ThumbPress", throwIfNotFound: true);
        m_RightHand_MRPPress = m_RightHand.FindAction("MRPPress", throwIfNotFound: true);
        m_RightHand_IndexPress = m_RightHand.FindAction("IndexPress", throwIfNotFound: true);
        m_RightHand_Velocity = m_RightHand.FindAction("Velocity", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Left Hand
    private readonly InputActionMap m_LeftHand;
    private ILeftHandActions m_LeftHandActionsCallbackInterface;
    private readonly InputAction m_LeftHand_ThumbPress;
    private readonly InputAction m_LeftHand_MRPPress;
    private readonly InputAction m_LeftHand_IndexPress;
    private readonly InputAction m_LeftHand_Velocity;
    public struct LeftHandActions
    {
        private @InMoov m_Wrapper;
        public LeftHandActions(@InMoov wrapper) { m_Wrapper = wrapper; }
        public InputAction @ThumbPress => m_Wrapper.m_LeftHand_ThumbPress;
        public InputAction @MRPPress => m_Wrapper.m_LeftHand_MRPPress;
        public InputAction @IndexPress => m_Wrapper.m_LeftHand_IndexPress;
        public InputAction @Velocity => m_Wrapper.m_LeftHand_Velocity;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterface != null)
            {
                @ThumbPress.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnThumbPress;
                @ThumbPress.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnThumbPress;
                @ThumbPress.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnThumbPress;
                @MRPPress.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMRPPress;
                @MRPPress.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMRPPress;
                @MRPPress.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnMRPPress;
                @IndexPress.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnIndexPress;
                @IndexPress.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnIndexPress;
                @IndexPress.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnIndexPress;
                @Velocity.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnVelocity;
                @Velocity.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnVelocity;
                @Velocity.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnVelocity;
            }
            m_Wrapper.m_LeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ThumbPress.started += instance.OnThumbPress;
                @ThumbPress.performed += instance.OnThumbPress;
                @ThumbPress.canceled += instance.OnThumbPress;
                @MRPPress.started += instance.OnMRPPress;
                @MRPPress.performed += instance.OnMRPPress;
                @MRPPress.canceled += instance.OnMRPPress;
                @IndexPress.started += instance.OnIndexPress;
                @IndexPress.performed += instance.OnIndexPress;
                @IndexPress.canceled += instance.OnIndexPress;
                @Velocity.started += instance.OnVelocity;
                @Velocity.performed += instance.OnVelocity;
                @Velocity.canceled += instance.OnVelocity;
            }
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);

    // Right Hand
    private readonly InputActionMap m_RightHand;
    private IRightHandActions m_RightHandActionsCallbackInterface;
    private readonly InputAction m_RightHand_ThumbPress;
    private readonly InputAction m_RightHand_MRPPress;
    private readonly InputAction m_RightHand_IndexPress;
    private readonly InputAction m_RightHand_Velocity;
    public struct RightHandActions
    {
        private @InMoov m_Wrapper;
        public RightHandActions(@InMoov wrapper) { m_Wrapper = wrapper; }
        public InputAction @ThumbPress => m_Wrapper.m_RightHand_ThumbPress;
        public InputAction @MRPPress => m_Wrapper.m_RightHand_MRPPress;
        public InputAction @IndexPress => m_Wrapper.m_RightHand_IndexPress;
        public InputAction @Velocity => m_Wrapper.m_RightHand_Velocity;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void SetCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterface != null)
            {
                @ThumbPress.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnThumbPress;
                @ThumbPress.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnThumbPress;
                @ThumbPress.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnThumbPress;
                @MRPPress.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnMRPPress;
                @MRPPress.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnMRPPress;
                @MRPPress.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnMRPPress;
                @IndexPress.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnIndexPress;
                @IndexPress.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnIndexPress;
                @IndexPress.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnIndexPress;
                @Velocity.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnVelocity;
                @Velocity.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnVelocity;
                @Velocity.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnVelocity;
            }
            m_Wrapper.m_RightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ThumbPress.started += instance.OnThumbPress;
                @ThumbPress.performed += instance.OnThumbPress;
                @ThumbPress.canceled += instance.OnThumbPress;
                @MRPPress.started += instance.OnMRPPress;
                @MRPPress.performed += instance.OnMRPPress;
                @MRPPress.canceled += instance.OnMRPPress;
                @IndexPress.started += instance.OnIndexPress;
                @IndexPress.performed += instance.OnIndexPress;
                @IndexPress.canceled += instance.OnIndexPress;
                @Velocity.started += instance.OnVelocity;
                @Velocity.performed += instance.OnVelocity;
                @Velocity.canceled += instance.OnVelocity;
            }
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);
    public interface ILeftHandActions
    {
        void OnThumbPress(InputAction.CallbackContext context);
        void OnMRPPress(InputAction.CallbackContext context);
        void OnIndexPress(InputAction.CallbackContext context);
        void OnVelocity(InputAction.CallbackContext context);
    }
    public interface IRightHandActions
    {
        void OnThumbPress(InputAction.CallbackContext context);
        void OnMRPPress(InputAction.CallbackContext context);
        void OnIndexPress(InputAction.CallbackContext context);
        void OnVelocity(InputAction.CallbackContext context);
    }
}
